/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package databaseUtils;

import com.nct.framework.common.LogUtil;
import com.nct.framework.dbconn.ClientManager;
import com.nct.framework.dbconn.ManagerIF;
import com.nct.framework.util.StringUtils;
import commonUtils.MyPrepareStatement;
import entities.DB.AppImageEnt;
import entities.TestEnt;
import entities.crawlEnt.VideoLinkEnt;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import org.apache.log4j.Logger;

/**
 *
 * @author liempt
 */
public class DatabaseServiceUtils {
    private static final Logger logger = LogUtil.getLogger(DatabaseServiceUtils.class);
    
    public static long CreateByNameEn(List<TestEnt> listTestEnt) {
        long categoryReturn = 0L;
        ManagerIF cm = ClientManager.getInstance("server_db");
        Connection cnn = cm.borrowClient();
        try {
            String query = "INSERT INTO Test (`Num01`, `Num02`, `NumTotal`)"
                    + " VALUES %s";
            
            String valuesQuery = "";
            MyPrepareStatement stmtValues = new MyPrepareStatement("(?,?,?)");
            for (TestEnt tmpTestEnt : listTestEnt) {
                stmtValues.setInt(1, tmpTestEnt.Num01);
                stmtValues.setInt(2, tmpTestEnt.Num02);
                stmtValues.setInt(3, (tmpTestEnt.Num01+tmpTestEnt.Num02));
                valuesQuery += stmtValues.toString() + ",";
            }
            while (valuesQuery.endsWith(",")) {
                valuesQuery = valuesQuery.substring(0, valuesQuery.lastIndexOf(","));
            }
            PreparedStatement stmt = cnn.prepareStatement(String.format(query, valuesQuery), Statement.RETURN_GENERATED_KEYS);
            
            int result = stmt.executeUpdate();
            if(result>0){
                ResultSet tableKeys = stmt.getGeneratedKeys();
                if(tableKeys.next()){
                    long autoGeneratedID = tableKeys.getLong(1);
                    categoryReturn = (autoGeneratedID>0) ? autoGeneratedID : 0;
                }
            }
        } catch (SQLException ex){
            logger.error(LogUtil.stackTrace(ex));
        } finally {
            cm.returnClient(cnn);
        }
        
        return categoryReturn;
    }
    
    public static long InsertAppImageEnt(List<AppImageEnt> listAppImageEnt) {
        long categoryReturn = 0L;
        ManagerIF cm = ClientManager.getInstance("server_db");
        Connection cnn = cm.borrowClient();
        try {
            String query = "INSERT INTO `App_Image` (`Thumb`, `Normal`, `Full`, `Tags`, `Status`)"
                    + " VALUES %s";
            
            String valuesQuery = "";
            MyPrepareStatement stmtValues = new MyPrepareStatement("(?,?,?,?,?)");
            for (AppImageEnt tmpAppImageEnt : listAppImageEnt) {
                stmtValues.setString(1, tmpAppImageEnt.Thumb);
                stmtValues.setString(2, tmpAppImageEnt.Normal);
                stmtValues.setString(3, tmpAppImageEnt.Full);
                stmtValues.setString(4, StringUtils.join(tmpAppImageEnt.Tags, ","));
                stmtValues.setInt(5, tmpAppImageEnt.Status);
                valuesQuery += stmtValues.toString() + ",";
            }
            while (valuesQuery.endsWith(",")) {
                valuesQuery = valuesQuery.substring(0, valuesQuery.lastIndexOf(","));
            }
            PreparedStatement stmt = cnn.prepareStatement(String.format(query, valuesQuery), Statement.RETURN_GENERATED_KEYS);
            
            int result = stmt.executeUpdate();
            if(result>0){
                ResultSet tableKeys = stmt.getGeneratedKeys();
                if(tableKeys.next()){
                    long autoGeneratedID = tableKeys.getLong(1);
                    categoryReturn = (autoGeneratedID>0) ? autoGeneratedID : 0;
                }
            }
        } catch (SQLException ex){
            logger.error(LogUtil.stackTrace(ex));
        } finally {
            cm.returnClient(cnn);
        }
        
        return categoryReturn;
   }
    
    public static long CreateVideoLinks(List<VideoLinkEnt> listVideoLinkEnt) {
        long categoryReturn = 0L;
        ManagerIF cm = ClientManager.getInstance("vnhai_server_db");
        Connection cnn = cm.borrowClient();
        try {
            String query = "INSERT INTO `table_link` (`Link`, `Title`, `Source`, `Status`)"
                    + " VALUES %s";
            
            String valuesQuery = "";
            MyPrepareStatement stmtValues = new MyPrepareStatement("(?,?,?,?)");
            for (VideoLinkEnt tmpVideoLinkEnt : listVideoLinkEnt) {
                stmtValues.setString(1, tmpVideoLinkEnt.Link);
                stmtValues.setString(2, tmpVideoLinkEnt.Title);
                stmtValues.setString(3, (tmpVideoLinkEnt.Source));
                stmtValues.setInt(4, (tmpVideoLinkEnt.Status));
                valuesQuery += stmtValues.toString() + ",";
            }
            while (valuesQuery.endsWith(",")) {
                valuesQuery = valuesQuery.substring(0, valuesQuery.lastIndexOf(","));
            }
            PreparedStatement stmt = cnn.prepareStatement(String.format(query, valuesQuery), Statement.RETURN_GENERATED_KEYS);
            
            int result = stmt.executeUpdate();
            if(result>0){
                ResultSet tableKeys = stmt.getGeneratedKeys();
                if(tableKeys.next()){
                    long autoGeneratedID = tableKeys.getLong(1);
                    categoryReturn = (autoGeneratedID>0) ? autoGeneratedID : 0;
                }
            }
        } catch (SQLException ex){
            logger.error(LogUtil.stackTrace(ex));
        } finally {
            cm.returnClient(cnn);
        }
        
        return categoryReturn;
    }
    
    
//    
//    String query = "INSERT INTO Mangas(`Title`, `Description`, `Authors`,  `Status`,"
//                    + "`Genres`, `Country`, `Source`, `InfoLink`, `PosterImage`, `CoverImage`,"
//                    + " `CreatedDate`, `PublishDate`, `md5`, `NumOfChapter`, `State`, `TitleEn`)"
//                    + " VALUES %s";
//            String values = "";
//            MyPrepareStatement stmtValues = new MyPrepareStatement("(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
//            for (Manga manga : mangas) {
//                stmtValues.setString(1, manga.title);
//                stmtValues.setString(2, manga.description);
//                stmtValues.setString(3, Utils.Lists.join(manga.authors, ","));
//                stmtValues.setInt(4, manga.status);
//                stmtValues.setString(5, Utils.Lists.join(manga.genre, ","));
//                stmtValues.setString(6, manga.country);
//                stmtValues.setInt(7, manga.source);
//                stmtValues.setString(8, manga.infoLink);
//                stmtValues.setString(9, manga.poster);
//                stmtValues.setString(10, manga.cover);
//                stmtValues.setLong(11, manga.createdDate);
//                stmtValues.setString(12, manga.publishDate);
//                stmtValues.setString(13, manga.md5);
//                stmtValues.setInt(14, manga.numOfChapter);
//                stmtValues.setInt(15, manga.state);
//                stmtValues.setString(16, manga.titleEn);
//                values += stmtValues.toString() + ",";
//            }
//            while (values.endsWith(",")) {
//                values = values.substring(0, values.lastIndexOf(","));
//            }
//
//            PreparedStatement stmt = cnn.prepareStatement(String.format(query, values));
//            stmt.executeUpdate();
//            stmt.close();
    
}
